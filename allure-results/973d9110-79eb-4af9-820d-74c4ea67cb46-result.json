{"name": "Create order without ingredients", "status": "failed", "statusDetails": {"message": "AssertionError: Failed to register user: {\"success\":false,\"message\":\"User already exists\"}\nassert 403 == 200\n +  where 403 = <Response [403]>.status_code", "trace": "api_client = <helpers.api_client.APIClient object at 0x00000240D89B7CE0>\n\n    @pytest.fixture\n    def registered_user(api_client):\n        user_data = {\n            'email': generate_email(),\n            'password': generate_password(),\n            'name': generate_name()\n        }\n    \n        # Регистрация\n        response = api_client.post(Urls.REGISTER, json=user_data)\n        if response.status_code == 403:\n            # Пользователь уже существует, пробуем с новыми данными\n            user_data['email'] = generate_email()\n            response = api_client.post(Urls.REGISTER, json=user_data)\n    \n>       assert response.status_code == 200, f\"Failed to register user: {response.text}\"\nE       AssertionError: Failed to register user: {\"success\":false,\"message\":\"User already exists\"}\nE       assert 403 == 200\nE        +  where 403 = <Response [403]>.status_code\n\nconftest.py:28: AssertionError"}, "start": 1755432800850, "stop": 1755432800850, "uuid": "93f20aff-b8fb-403c-8dc5-bcf9438a927a", "historyId": "b22518968efdfb5568e068272f1a6485", "testCaseId": "b22518968efdfb5568e068272f1a6485", "fullName": "tests.test_create_order.TestCreateOrder#test_create_order_no_ingredients", "labels": [{"name": "feature", "value": "Order Creation"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_create_order"}, {"name": "subSuite", "value": "TestCreateOrder"}, {"name": "host", "value": "dea-1611"}, {"name": "thread", "value": "18368-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_create_order"}]}